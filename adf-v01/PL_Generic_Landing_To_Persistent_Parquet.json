{
	"name": "PL_Generic_Landing_To_Persistent_Parquet",
	"properties": {
		"description": "Take file by file (non paginated) from Landing to Persisted Storage",
		"activities": [
			{
				"name": "Container Name",
				"type": "SetVariable",
				"dependsOn": [],
				"userProperties": [],
				"typeProperties": {
					"variableName": "v_ContainerName",
					"value": {
						"value": "@toLower(concat(json(string(pipeline().parameters.P_PipelineParameters)).Version\n, '-'\n,json(string(pipeline().parameters.P_PipelineParameters)).SourceName\n, '-'\n,json(string(pipeline().parameters.P_PipelineParameters)).SourceSubName\n,if(and(contains(json(string(pipeline().parameters.P_PipelineParameters)), 'FileSubName'), not(empty(json(string(pipeline().parameters.P_PipelineParameters)).FileSubName))), concat('-', json(string(pipeline().parameters.P_PipelineParameters)).FileSubName), '')\n))",
						"type": "Expression"
					}
				}
			},
			{
				"name": "Update LastModifiedDate",
				"description": "Update LastModifiedDate in config.Pipeline in our metadata db so our next delta load will load form that point",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Copy Persistent",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.00:05:00",
					"retry": 2,
					"retryIntervalInSeconds": 60,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[config].[Update_Pipeline_LastModifiedDate]",
					"storedProcedureParameters": {
						"PipelineId": {
							"value": {
								"value": "@int(json(string(pipeline().parameters.P_PipelineParameters)).PipelineId)",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"LastModifiedDate": {
							"value": {
								"value": "@if(equals(activity('Copy Persistent').output.runStatus.profile.Landing.total, 0)\n, json(string(pipeline().parameters.P_PipelineParameters)).LastModifiedDate\n, pipeline().TriggerTime\n)",
								"type": "Expression"
							},
							"type": "Datetime"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LS_Metadata_SQL",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Update RowCounts",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Copy Persistent",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.00:05:00",
					"retry": 2,
					"retryIntervalInSeconds": 60,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[audit].[Update_CurrentExecutionRowCounts]",
					"storedProcedureParameters": {
						"PipelineId": {
							"value": {
								"value": "@int(json(string(pipeline().parameters.P_PipelineParameters)).PipelineId)",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"RowsRead": {
							"value": {
								"value": "@if(empty(activity('Copy Persistent').output.runStatus.metrics)\n, 0\n,int(activity('Copy Persistent').output.runStatus.metrics.Persisted.sources.Landing.rowsRead))",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"RowsCopied": {
							"value": {
								"value": "@if(empty(activity('Copy Persistent').output.runStatus.metrics)\n, 0\n,int(activity('Copy Persistent').output.runStatus.metrics.Persisted.rowsWritten))",
								"type": "Expression"
							},
							"type": "Int32"
						},
						"CurrentExecutionId": {
							"value": {
								"value": "@if(\n    contains(\n        json(\n            string(pipeline().parameters.P_PipelineParameters)\n        ),\n        'CurrentExecutionId'\n    ),\n    json(\n        string(pipeline().parameters.P_PipelineParameters)\n    ).CurrentExecutionId,\n    null\n)",
								"type": "Expression"
							},
							"type": "string"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LS_Metadata_SQL",
					"type": "LinkedServiceReference"
				}
			},
			{
				"name": "Container Check",
				"description": "Check if the container has been created and create if need be",
				"type": "ExecutePipeline",
				"dependsOn": [
					{
						"activity": "Container Name",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"userProperties": [],
				"typeProperties": {
					"pipeline": {
						"referenceName": "preparePersistentContainer",
						"type": "PipelineReference"
					},
					"waitOnCompletion": true,
					"parameters": {
						"containerName": {
							"value": "@variables('v_ContainerName')",
							"type": "Expression"
						}
					}
				}
			},
			{
				"name": "Copy Persistent",
				"description": "Calls Data Flow DF_Generic_Landing_To_Persisted to move and partition data",
				"type": "ExecuteDataFlow",
				"dependsOn": [
					{
						"activity": "Container Check",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "1.00:00:00",
					"retry": 2,
					"retryIntervalInSeconds": 60,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [
					{
						"name": "Source",
						"value": "@variables('v_ContainerName')"
					}
				],
				"typeProperties": {
					"dataflow": {
						"referenceName": "DF_Generic_Landing_To_Persisted_Parquet",
						"type": "DataFlowReference",
						"parameters": {
							"P_ContainerName": {
								"value": "'@{variables('v_ContainerName')}'",
								"type": "Expression"
							},
							"P_LastModifiedDate": {
								"value": "'@{if(equals(formatDateTime(json(string(pipeline().parameters.P_PipelineParameters)).LastModifiedDate, 'yyyy-MM-dd'), '1900-01-01'), formatDateTime(utcnow(), 'yyyy-MM-dd'), json(string(pipeline().parameters.P_PipelineParameters)).LastModifiedDate)}'",
								"type": "Expression"
							},
							"p_Wildcard": {
								"value": "'@{'*.parquet'}'",
								"type": "Expression"
							},
							"P_PipelineStartDate": {
								"value": "'@{formatDateTime(pipeline().TriggerTime, 'yyyy-MM-dd')}'",
								"type": "Expression"
							},
							"P_ExecutionType": {
								"value": "'@{json(string(pipeline().parameters.P_PipelineParameters)).ExecutionType}'",
								"type": "Expression"
							},
							"P_DateColumn": {
								"value": "'@{if(equals(json(string(pipeline().parameters.P_PipelineParameters)).ExecutionType, 'I'), json(string(pipeline().parameters.P_PipelineParameters)).DateColumn, 'No Column')}'",
								"type": "Expression"
							},
							"P_EndDate": {
								"value": "'@{if(or(not(contains(json(string(pipeline().parameters.P_PipelineParameters)), 'EndDate')), equals(json(string(pipeline().parameters.P_PipelineParameters)).EndDate, NULL)), formatDateTime(utcnow(), 'yyyy-MM-dd'), json(string(pipeline().parameters.P_PipelineParameters)).EndDate)}'",
								"type": "Expression"
							},
							"P_SecondaryDateColumn": {
								"value": "'@{if(or(not(contains(json(string(pipeline().parameters.P_PipelineParameters)), 'SecondaryDateColumn')), equals(json(string(pipeline().parameters.P_PipelineParameters)).SecondaryDateColumn, NULL))\n, ''\n, json(string(pipeline().parameters.P_PipelineParameters)).SecondaryDateColumn\n)}'",
								"type": "Expression"
							},
							"P_RemoveRowNumberColumn": {
								"value": "'@{if(not(contains(json(string(pipeline().parameters.P_PipelineParameters)), 'RemoveRowNumberColumn'))\n, ''\n, json(string(pipeline().parameters.P_PipelineParameters)).RemoveRowNumberColumn\n)}'",
								"type": "Expression"
							}
						},
						"datasetParameters": {
							"Landing": {
								"containerName": {
									"value": "@variables('v_ContainerName')",
									"type": "Expression"
								}
							},
							"Persisted": {
								"containerName": {
									"value": "@variables('v_ContainerName')",
									"type": "Expression"
								}
							}
						}
					},
					"integrationRuntime": {
						"referenceName": "mi-managed-runtime-large-optimised",
						"type": "IntegrationRuntimeReference"
					},
					"traceLevel": "Fine"
				}
			}
		],
		"concurrency": 10,
		"parameters": {
			"P_PipelineParameters": {
				"type": "object",
				"defaultValue": {
					"PipelineId": "2001",
					"ExecutionType": "I",
					"DateColumn": "P.date_updated",
					"SourceName": "payment",
					"SourceSubName": "payment-history",
					"LastModifiedDate": "2021-01-01 00:00:00",
					"EndDate": "2021-09-02 16:31:57",
					"Version": "v2"
				}
			}
		},
		"variables": {
			"v_ContainerName": {
				"type": "String"
			},
			"v_LastModifiedDate": {
				"type": "String",
				"defaultValue": "1900-01-01"
			}
		},
		"folder": {
			"name": "Generic"
		},
		"annotations": []
	}
}