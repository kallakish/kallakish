// Step 1: Get all Activity Log Alerts related to NSGs
let NSGAlerts = resources
| where type == "microsoft.insights/activitylogalerts"
| extend scopes = properties.scopes, conditions = properties.condition.allOf
| mv-expand scopes
| extend subscriptionId = tostring(split(scopes, "/")[2])
| where conditions contains "Microsoft.Network/networkSecurityGroups";

// Step 2: Get all subscriptions
resources
| where type == "microsoft.resources/subscriptions"
| project subscriptionId = id, subscriptionName = name
| join kind=leftouter (
    NSGAlerts
    | distinct subscriptionId
) on subscriptionId
| extend hasNSGAlert = iif(isnotempty(subscriptionId1), "Yes", "No")
| where hasNSGAlert == "No"
| project subscriptionId, subscriptionName, hasNSGAlert




// Step 1: Get all Activity Log Alerts related to NSGs
let NSGAlerts = resources
| where type == "microsoft.insights/activitylogalerts"
| extend scopes = properties.scopes, conditions = properties.condition.allOf
| mv-expand scopes
| extend subscriptionId = tostring(split(scopes, "/")[2])
| where conditions contains "Microsoft.Network/networkSecurityGroups"
| distinct subscriptionId;

// Step 2: Get all subscriptions
resourcecontainers
| where type == "microsoft.resources/subscriptions"
| project subscriptionId = id, subscriptionName = name
| join kind=leftouter (
    NSGAlerts
) on subscriptionId
| extend hasNSGAlert = iif(isnotempty(subscriptionId1), "Yes", "No")
| where hasNSGAlert == "No"
| project subscriptionId, subscriptionName, hasNSGAlert



# Requires Az PowerShell module
# Connect to Azure
Connect-AzAccount

# Alert parameters (to match existing alerts)
$alertRuleName  = "NSG-Change-Alert"
$alertRuleRg    = "Monitoring-Alerts-RG"   # Adjust if you placed alerts elsewhere

# Function to check if alert exists
function Check-NSGAlert {
    param(
        [string]$subscriptionId
    )
    Set-AzContext -Subscription $subscriptionId

    # Look for an Activity Log Alert targeting NSGs
    $alert = Get-AzActivityLogAlert -ErrorAction SilentlyContinue | Where-Object {
        $_.Name -eq $alertRuleName -and $_.ResourceGroupName -eq $alertRuleRg
    }

    if ($alert) {
        Write-Host "‚úÖ Subscription $subscriptionId has NSG alert: $($alert.Name)" -ForegroundColor Green
    }
    else {
        Write-Host "‚ùå Subscription $subscriptionId does NOT have NSG alert." -ForegroundColor Red
    }
}

# Process all subscriptions
$subs = Get-AzSubscription
foreach ($sub in $subs) {
    Write-Host "`n--- Checking subscription $($sub.Name) ($($sub.Id)) ---"
    Check-NSGAlert -subscriptionId $sub.Id
}













=====================

# Requires Az PowerShell module
# Connect to Azure
Connect-AzAccount

# Define parameters
$actionGroupId  = "/subscriptions/<SUB-ID>/resourceGroups/<RG-NAME>/providers/microsoft.insights/actionGroups/<ACTION-GROUP-NAME>"
$alertRuleName  = "NSG-Change-Alert"
$alertRuleRg    = "Monitoring-Alerts-RG"   # Must exist in each subscription

# Function to check and create NSG alert if missing
function Ensure-NSGAlert {
    param(
        [string]$subscriptionId,
        [string]$subscriptionName
    )
    Set-AzContext -Subscription $subscriptionId

    # Check for existing alert
    $alert = Get-AzActivityLogAlert -ErrorAction SilentlyContinue | Where-Object {
        $_.Name -eq $alertRuleName -and $_.ResourceGroupName -eq $alertRuleRg
    }

    if ($alert) {
        Write-Host "‚úÖ Subscription $subscriptionName ($subscriptionId) already has NSG alert: $($alert.Name)" -ForegroundColor Green
    }
    else {
        Write-Host "‚ùå Subscription $subscriptionName ($subscriptionId) has NO NSG alert. Creating one..." -ForegroundColor Yellow

        $conditions = @(
            New-AzActivityLogAlertCondition -Field "category" -Equal "Administrative",
            New-AzActivityLogAlertCondition -Field "resourceType" -Equal "Microsoft.Network/networkSecurityGroups"
        )

        New-AzActivityLogAlert `
            -Name $alertRuleName `
            -ResourceGroupName $alertRuleRg `
            -Location "Global" `
            -Scope "/subscriptions/$subscriptionId" `
            -ActionGroupId $actionGroupId `
            -Condition $conditions `
            -Enabled $true

        Write-Host "üöÄ Created NSG alert in subscription $subscriptionName ($subscriptionId)." -ForegroundColor Cyan
    }
}

# Process all subscriptions
$subs = Get-AzSubscription
foreach ($sub in $subs) {
    Write-Host "`n--- Checking subscription $($sub.Name) ($($sub.Id)) ---"
    Ensure-NSGAlert -subscriptionId $sub.Id -subscriptionName $sub.Name
}




# Requires Az PowerShell module
# Connect to Azure
Connect-AzAccount

# Function to check if any NSG alert exists in a subscription
function Check-NSGAlert {
    param(
        [string]$subscriptionId,
        [string]$subscriptionName
    )
    Set-AzContext -Subscription $subscriptionId

    # Get all Activity Log Alerts in the subscription
    $alerts = Get-AzActivityLogAlert -ErrorAction SilentlyContinue

    # Filter for NSG-related alerts
    $nsgAlerts = $alerts | Where-Object {
        $_.Condition.AllOf.Field -contains "resourceType" -and
        $_.Condition.AllOf.Value -contains "Microsoft.Network/networkSecurityGroups"
    }

    if ($nsgAlerts) {
        Write-Host "‚úÖ Subscription $subscriptionName ($subscriptionId) has at least one NSG alert." -ForegroundColor Green
    }
    else {
        Write-Host "‚ùå Subscription $subscriptionName ($subscriptionId) has NO NSG alerts." -ForegroundColor Red
    }
}

# Process all subscriptions
$subs = Get-AzSubscription
foreach ($sub in $subs) {
    Write-Host "`n--- Checking subscription $($sub.Name) ($($sub.Id)) ---"
    Check-NSGAlert -subscriptionId $sub.Id -subscriptionName $sub.Name
}

# Requires Az PowerShell module
Connect-AzAccount

# Collect results
$results = @()

function Check-NSGAlert {
    param(
        [string]$subscriptionId,
        [string]$subscriptionName
    )

    Set-AzContext -Subscription $subscriptionId -ErrorAction SilentlyContinue | Out-Null

    # Get all Activity Log Alerts
    $alerts = Get-AzActivityLogAlert -ErrorAction SilentlyContinue

    # Filter for NSG-related alerts
    $nsgAlerts = $alerts | Where-Object {
        $_.Condition.AllOf.Field -contains "resourceType" -and
        $_.Condition.AllOf.Value -contains "Microsoft.Network/networkSecurityGroups"
    }

    # Add to results
    $results += [PSCustomObject]@{
        SubscriptionName = $subscriptionName
        SubscriptionId   = $subscriptionId
        HasNSGAlert      = if ($nsgAlerts) { "Yes" } else { "No" }
        AlertCount       = if ($nsgAlerts) { $nsgAlerts.Count } else { 0 }
    }
}

# Loop through all subscriptions
$subs = Get-AzSubscription
foreach ($sub in $subs) {
    Check-NSGAlert -subscriptionId $sub.Id -subscriptionName $sub.Name
}

# Print results in table
$results | Format-Table -AutoSize




-----

# Requires Az PowerShell module
Connect-AzAccount

# Collect results
$results = @()

function Check-NSGAlert {
    param(
        [string]$subscriptionId,
        [string]$subscriptionName
    )

    Set-AzContext -Subscription $subscriptionId -ErrorAction SilentlyContinue | Out-Null

    # Get all Activity Log Alerts
    $alerts = Get-AzActivityLogAlert -ErrorAction SilentlyContinue

    # Look for NSG-related alerts (by operationName or resourceType)
    $nsgAlerts = @()
    foreach ($a in $alerts) {
        foreach ($cond in $a.Condition.AllOf) {
            if (
                ($cond.Field -eq "resourceType" -and $cond.Equal -eq "Microsoft.Network/networkSecurityGroups") -or
                ($cond.Field -eq "operationName" -and $cond.Equal -match "NetworkSecurityGroup")
            ) {
                $nsgAlerts += $a
            }
        }
    }

    # Add to results
    $results += [PSCustomObject]@{
        SubscriptionName = $subscriptionName
        SubscriptionId   = $subscriptionId
        HasNSGAlert      = if ($nsgAlerts) { "Yes" } else { "No" }
        AlertCount       = if ($nsgAlerts) { $nsgAlerts.Count } else { 0 }
        AlertNames       = if ($nsgAlerts) { ($nsgAlerts.Name -join ", ") } else { "" }
    }
}

# Loop through all subscriptions
$subs = Get-AzSubscription
foreach ($sub in $subs) {
    Check-NSGAlert -subscriptionId $sub.Id -subscriptionName $sub.Name
}

# Print results in table
$results | Format-Table -AutoSize


